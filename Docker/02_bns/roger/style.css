/* Color variables */

:root {
    --bcolor1: #E0FFFF;
    --bcolor2: #66CCFF;
}

body {
    background-color: var(--bcolor1);
    display: flex;
    align-items: center;
    justify-content: center;
    height: 100vh;
    font-family: 'Lato', sans-serif;
    font-weight: 100;
    font-size: 17pt;
    letter-spacing: 1px;
}

.background {
    width: 550px;
    height: 550px;
    border-radius: 50%;
    box-shadow: 0 0px 35px rgba(0, 0, 0, 0.35);
    position: relative; /*элемент позиционируется в соотв-ии с норм потоком документа, а затем 
    смещается относ-о себя на основе значений top, right, bottom, left. Смещение не влияет на 
    положение любых других элементов*/
    overflow: hidden; /*контент обрезается без предопставления прокрутки */
    background: radial-gradient(#E0FFFF, #C2DFFF); /*небо ------freecodecamp */
}

.background::before, .background::after {
    content: ""; /*позволяет вставлять генерируемое содержание в текст веб-страницы, которое первоначально 
    в тексте отсутствует. Применяется совместно с псевдоэлементами ::after и ::before, они соответственно 
    указывают отображать новое содержимое после или до содержимого элемента, к которому добавляются.*/
    animation: waves linear 15s infinite normal;
    border-radius: 255px;
    height: 750px;
    width: 750px;
    position: absolute; /*Устанавливает положение нижнего края содержимого элемента без учёта толщины рамок и 
    отступов. Отсчёт координат зависит от свойства position, оно обычно принимает значение relative 
    (относительное положение) или absolute (абсолютное положение).
    При относительном позиционировании элемента, отсчёт ведётся от нижнего края исходного положения элемента, 
    а при абсолютном — относительно нижнего края окна браузера. 
    Если для родительского элемента задано position:relative, то абсолютное позиционирование дочерних элементов 
    определяет их положение от нижнего края родителя.*/
    bottom: auto;
    box-shadow: 0 0 0 1000px transparent; /*<сдвиг по x> <сдвиг по y> <размытие> <растяжение> <цвет>*/
    display: block; /*Элемент показывается как блочный. Применение этого значения для строчных элементов, 
    например <span>, заставляет его вести подобно блокам — происходит перенос строк в начале и в 
    конце содержимого.*/
    right: auto;
    left: 50%;
    transform: translate3d(-50%, 65%, 0); /*Сдвигает элемент на заданное значение в трёхмерном пространстве.*/
}

.background::before {
    background: #82CAFF;
    bottom: -45px;
}

.background::after {
    background: #38ACEC;
    animation: waves linear 10s infinite reverse;
    bottom: -135px;
}

/*.circle {
    width: 400px;
    height: 400px;
    border-radius: 50%;
    box-shadow: 0 0px 35px rgba(0, 0, 0, 0.35);
    position: relative;
}*/

.container {
    display: flex;
    flex-flow: column;
    flex-wrap: wrap;
    padding: 5px;
    width: 8vw;
    position: relative;
    overflow: hidden;
}

.buttons {
    text-align: center;
    text-transform: uppercase;
    padding: 5px;
    margin: 10px;
    border: 2px solid #43C6DB;
    border-radius: 30px;
}

.buttons:hover {
    cursor: pointer;
}

#rocks {
    width: 300px;
    height: 100px;
    background: #3EA055;
    border-radius: 150px 150px 0 0;
    position: absolute;
    left: 50%;
    bottom: 14%;
    transform: translateX(-45%);
}
/*.lighthouse {
}*/

#body {
    width: 110px;
    height: 160px;
    background: repeating-linear-gradient(
        45deg,
        #eee,
        #eee 20px,
        #d03b3f 20px,
        #d03b3f 40px);
    transform: translate(-50%, -50%);  /*Трансформирует элемент, в частности, позволяет его масштабировать, 
    вращать, сдвигать, наклонять, а также комбинировать виды трансформаций, перечисляя функции 
    трансформации через пробел. translate() - cдвигает элемент на заданное значение по горизонтали и вертикали.*/
    clip-path: polygon(30% 0, 70% 0, 100% 100%, 0% 100%); /*обрезает, вырезает фигуру*/
    box-shadow: inset -40px 0 0px 0px rgba(0,0,0,.04); /* inset(тень внутри элемента) <сдвиг по x> 
    <сдвиг по y> <размытие> <растяжение> <цвет> */
    position: absolute;
    left: 52%;
    top: 54%;
}

#square {
    width: 36px;
    height: 25px;
    background: #eee;
    top: calc(51% - 82px);
    left: 45%;
    position: absolute;
    border-left: 4px solid #052a4c;
    border-right: 4px solid #052a4c;
    border-top: 6px solid #9E9E9E;
    border-bottom: 6px solid #9E9E9E;
    transform: translate(36%, -50%);
}

#top {
    height: 0;
    width: 20px;
    border-bottom: 33px solid #d03b3f;
    border-left: 27px solid transparent;
    border-right: 27px solid transparent;
    transform: translate(-18%, -145%);
    top: calc(51% - 85px);
    position: absolute;
    left: calc(47% + 2px);
}

#top2 {
    height: 25px;
    width: 25px;
    border-radius: 50%;
    background: #d03b3f;
    position: absolute;
    transform: translate(-18%, -145%);
    left: 50%;
    top: calc(51% - 115px);
}

/*.buttons:hover:after {
    transition: .3s;
    height: 120%;
    left: -10%;
    transform: skewX(15deg);
    z-index: -1;
    color: white;
}*/

/* ------@keyframes-------

Правило @keyframes устанавливает ключевые кадры при анимации элемента. Ключевой кадр это свойства элемента 
(прозрачность, цвет, положение и др.), которые должны применяться к элементу в заданный момент времени. 
Таким образом, анимация представляет собой плавный переход стилевых свойств от одного ключевого кадра к другому.
Вычисление промежуточных значений между такими кадрами берёт на себя браузер.

Самый простой вариант, когда у нас есть только два ключевых кадра — исходное и конечное состояние.

В таком случае @keyframes запишется в следующем виде:
@keyframes box {
 from { left: 0; }
 to { left: 300px; }
}

В данном случае мы даём нашему набору имя box, оно затем будет задействовано в свойстве animation и 
определяем, что элемент будет изменять значение свойства left от 0 до 300 пикселей. Вместо ключевых слов 
from и to можно использовать, соответственно, 0% и 100%.

Ключевые кадры необязательно должны начинаться с 0% и заканчиваться 100%. Анимация тогда будет 
происходить не сразу.

@keyframes box {
 50% { left: 0; }
 90% { left: 300px; }
}

Синтаксис
@keyframes <переменная> { [ from | to | <проценты> ] [, from | to | <проценты> ]* }

Значения
<переменная> - уникальная переменная, которая связывает @keyframes с animation, через это свойство 
настраивается время анимации и другие её параметры.
from - первый ключевой кадр, аналогичен 0%.
to - последний ключевой кадр, аналогичен 100%.
<проценты> - устанавливает ключевой кадр в процентах от времени всей анимации.

------@keyframes-------
*/

@keyframes waves {
    from { transform: translate3d(-50%, 65%, 0) rotate(0deg); }
    to { transform: translate3d(-50%, 65%, 0) rotate(-360deg); }
}

#sun, #inner-sun, #outer-sun {
    transform-origin: center;
    transform-box: fill-box;
    animation: pulse 2.5s ease-in-out infinite;
}
#sun {
    fill: rgb(255, 232, 124, 1);
}
#inner-sun {
    fill: rgba(255, 235, 124, 0.5);
}
#outer-sun {
    fill: rgba(255, 235, 124, 0.25);
}
#inner-sun, #outer-sun {
    animation-delay: 0.2s;
}

@keyframes pulse {
    0% { transform: scale(1); }
    50% { transform: scale(1.3); }
}
.day-sun
{
    display: block;
}
.hidden
{
    background-color: #d03b3f;
    display: none;
    visibility: hidden;
}