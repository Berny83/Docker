Fail2ban — это утилита , которая отслеживает в log-гах(например, /var/log/apache/error_log) все попытки обратится к серверам, 
таким, как SMTP, SSH, FTP, HTTP и другим, и если находит постоянно повторяющиеся неудачные попытки авторизации с одного и того же IP-адреса 
или хоста, fail2ban блокирует дальнейшие попытки с этого IP-адреса/хоста, с помощью правила iptables(ipfw) или host.deny.

Fail2ban защитит компьютер от атак грубой силы, который написанный на языке Python. Данная программа способна работать в системах POSIX, 
которые имеют интерфейс к системе или  установленный брандмауэр локально, например, Iptables или TCP Wrapper.

Fail2ban сканирует лог-файлы (например, /var/log/httpd/error_log) и блокирует IP-адреса, которые ведут себя подозрительно, к примеру, 
делая слишком много попыток входа с неверным паролем в попытках найти уязвимости и т.п. Обычно Fail2ban используется для обновления 
правил с целью блокировки IP-адресов на определённое время, но можно настроить и другие действия — например, отправку письма по электронной почте.

Важно: Использование блокировки по IP защитит только от простейших атак, но для работы потребуется дополнительный демон и 
правильно настроенное журналирование. К тому же злоумышленники, знающие ваш IP-адрес, могут послать пакеты с подменёнными заголовками 
отправителя и лишить вас доступа к серверу. Не забудьте прописать собственные IP-адреса в ignoreip.

Служба Fail2ban может помочь в решении этой проблемы, создавая правила, автоматически изменяющие конфигурацию брандмауэра iptables. 
Это позволит серверу реагировать на попытки несанкционированного доступа без вашего вмешательства. 
В терминах Fail2ban такая комбинация фильтрации и действий называется “тюрьмой” (jail). 
Названо так, потому, что ip адрес блокируется на определенное время, как бы сажается в тюрьму.

Как работает Fail2ban
Работает утилита следующим образом, при настройке вы указываете путь к файлу логов. 
Fail2ban отслеживает изменения в лог-файлах служб и при обнаружении в логах определенного количества неудачных попыток входа в систему 
блокирует ip адрес злоумышленника. Например при неправильном вводе пароля для ssh на сервере Centos 7, в фале логов /var/log/secure 
регистрируется попытка неудачного входа и появляется строка

Jan 31 22:38:18 localhost sshd[5649]: Failed password for root from 34.56.21.11 port 49302 ssh2
Утилита сравнивает эту строку с регулярным выражением в своих фильтрах. 
Например эта строка попадает под регулярное выражение в файле /etc/fail2ban/filter.d/sshd.conf

"Failed \S+ for .*? from <HOST>..."
И поэтому эта попытка будет считаться взломом, и если число попыток превышает указанное количество, то ip адрес блокируется через iptables.


https://itproffi.ru/ustanovka-i-nastrojka-fail2ban-zashhita-ssh-servera/
Конфигурация локальных параметров
Файлы конфигурации службы Fail2ban хранятся в директории /etc/fail2ban. В ней есть файл с параметрами по умолчанию под названием jail.conf. 
Этот файл может быть перезаписан при обновлении пакета, поэтому мы не будем его редактировать, а создадим новый под названием jail.local.

Если в jail.local и jail.conf определены одни и те же параметры, будут использоваться значения из файла .local

Параметры конфигурации также могут быть прописаны в файлах, расположенных в директории /etc/fail2ban/jail.d/. 
Приоритет файлов конфигурации будет следующим (в порядке повышения):

1./etc/fail2ban/jail.conf
2./etc/fail2ban/jail.d/*.conf, в алфавитном порядке
3./etc/fail2ban/jail.local
4./etc/fail2ban/jail.d/*.local, в алфавитном порядке

Файлы конфигурации могут содержать раздел [DEFAULT] с общими настройками и отдельные разделы для “тюрем”. Значения параметров, 
установленные в отдельных разделах, имеют приоритет. Для начала можно создать простейшую версию jail.local. Откройте новый файл любым 
текстовым редактором:

vi /etc/fail2ban/jail.local
Вставьте следующий текст:

[DEFAULT]
ignoreip = 127.0.0.1/8 192.168.0.0/24

[ssh-iptables]
enabled  = true
port = ssh 
filter = sshd 
action = iptables[name=sshd, port=ssh, protocol=tcp]
logpath = /var/log/secure

ignoreip — указывает адреса источников, которые Fail2ban будет игнорировать (так называемый белый список). 
В данном примере она настроена не запрещать трафик с локальной машины и из сети 192.168.0.0/24. 
Можно указать дополнительные адреса через пробел.

enabled — принимает значение true/false включение отключение тюрьмы

port — В данном случае ssh — предустановленное значение стандартного порта SSH (22). 
Если у вас ssh работает не на 22-м порту, то в этом параметре пропишите номер своего порта.

filter — фактически представляет собой ссылку на файл в директории /etc/fail2ban/filter.d без указания расширения .conf. 
Он содержит регулярные выражения, определяющие условия выявления неудачной аутентификации по строке лога. То есть, в данном примере неудачные попытки входа в систему будут определяться по логу sshd с использованием условий, прописанных в /etc/fail2ban/filter.d/sshd.conf. Обычно достаточно значений, заданных по умолчанию. При необходимости вы можете посмотреть файлы в этой директории и открыть при помощи текстового редактора те, которые связаны с используемыми вами службами. В большинстве таких файлов достаточно развернутые комментарии, и вы легко разберетесь, какие условия скрипт считает признаком неправомерного доступа.

logpath — путь к лог файлу, предполагает использование лога sshd

action — выполняемое действие из каталога /etc/fail2ban/action.d.В нашем примере это настроить iptables заблокировав порт ssh по протоколу tcp. 
Если нужно заблокировать все порты от адреса взломщика, то можно использовать действие iptables-allports.

Кроме базовых настроек, jail.local также содержит различные настройки для большого числа распространенных сервисов, включая SSH. По умолчанию, она работает только для SSH.



Примерная конфигурация файла для защиты SSH:
[ssh]
enabled  = true
port = ssh
filter   = sshd
logpath  = /var/log/auth.log
maxretry = 6

Значение переменных:
enabled: определяет, включен фильтр или нет.
port: порт сервиса, на который ссылается Fail2ban. Если используется порт по умолчанию, тогда можно использовать имя сервиса. 
Если вы перенесли ваш SSH порт на 3456, замените ssh на 3456.
filter: фильтр, который будет использоваться.
logpath: расположение логов сервиса.
maxretry: перезапишет глобальное значение maxretry для определенного сервиса. Также можно добавить findtime и bantime.
action: это может быть дополнительной настройкой, если значение по умолчанию не подходит. Дополнительные действия можно найти в 
папке /etc/fail2ban/action.d


Настройка общих параметров
В созданной нами версии файла jail.local мы определили основные параметры для конкретной тюрьмы. Давайте теперь настроем общие параметры для всех. 
Откроем jail.conf и рассмотрим некоторые из них.  
Если вам потребуется изменить какие-либо значения, для определенной «тюрмы» их нужно скопировать в соответствующий раздел jail.local.

bantime = 600
Параметр bantime указывает временной интервал, в течение которого взломщику будет запрещено подключение, если он не сможет корректно выполнить 
аутентификацию. Время указывается в секундах, по умолчанию 600, то есть 10 минут.

findtime = 600
maxretry = 3
Два следующих параметра, на которые стоит обратить внимание — findtime и maxretry. 
Они используются совместно для определения условий отказа клиенту в доступе.

Переменная maxretry устанавливает разрешенное клиенту количество попыток аутентификации во временном окне findtime, 
прежде чем ему будет отказано в доступе. По умолчанию это выполняется для клиента, который сделал 3 неудачных попытки входа в систему за 10 минут.

Короче я понимаю это так, он говорит вот лог logpath = %(sshd_log)s для мониторинга изменений (fail2ban также устанавливает свои движки для мониторинга аля 
"движки для некоторых приложений к systemd":
syslog_backend = systemd
sshd_backend = systemd
в которых написано как контролить изменения в логах: и pyinotify, затем gamin, 
а затем алгоритм опроса, основанный на доступных данных - и есть они.

https://www.myht.ru/question/42320994-brus-vklyuchit-fail2ban-tyuremnyy-sshd

Параметры сервисов в файлах jail.* содержат местоположение лога, а также механизм опроса, который должен использоваться для 
проверки файла (определяется параметром backend). Он также включает фильтр, который должен использоваться для определения 
сообщений об ошибках в логе.
8:25
backend – определяет, как fail2ban будет контролировать логи. Настройка auto означает, что fail2ban будет пробовать pyinotify, 
затем gamin, а затем алгоритм опроса, основанный на доступных данных
8:25
pyinotify — python модуль, с помощью которого мы можем настроить монитоинг изменений нужной нам директории в системе.